{
	"id": 0,
	"name": "mathlive",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"mathlive.d\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/arno/Documents/GitHub/cortexjs.io/node_modules/mathlive/dist/mathlive.d.ts",
			"children": [
				{
					"id": 170,
					"name": "\"mathlive\"",
					"kind": 2,
					"kindString": "Module",
					"flags": {},
					"comment": {
						"shortText": "Use MathLive to render and edit mathematical formulas in your browser.",
						"text": "This module exports {@link #functions%3Amathlive some functions} and the {@link #class%3AMathField `MathField`} class.\n\nSee {@tutorial USAGE_GUIDE the Usage Guide} for more details on how to get\nstarted.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n// To invoke the functions in this module, import the `mathlive` module.\n\nimport mathlive from 'dist/mathlive.mjs';\n\nconsole.log(mathlive.latexToMarkup('e^{i\\\\pi}+1=0'));\n"
							},
							{
								"tag": "module",
								"text": "mathlive"
							},
							{
								"tag": "packagedocumentation",
								"text": "MathLive API Reference\n\n"
							}
						]
					},
					"children": [
						{
							"id": 192,
							"name": "astToLatex",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 193,
									"name": "astToLatex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts an Abstract Syntax Tree (MathJSON) to a LaTeX string.",
										"text": "**See:** {@tutorial MASTON}\n",
										"returns": "The LaTeX representation of the Abstract Syntax Tree, if valid.",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#astToLatex\n"
											}
										]
									},
									"parameters": [
										{
											"id": 194,
											"name": "ast",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The Abstract Syntax Tree as an object literal (MathJSON)."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 195,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 196,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 204,
															"name": "beginRepeatingDigits",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The string\nused at the begining of repeating digits. **Default** = `\"\\\\overline{\"`"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 740,
																	"character": 28
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 198,
															"name": "decimalMarker",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The character used as the decimal\nmarker. **Default** = `\".\"`."
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 734,
																	"character": 21
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 205,
															"name": "endRepeatingDigits",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The string\nused at the end of repeating digits. **Default** = `\"}\"`\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 741,
																	"character": 26
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 202,
															"name": "exponentMarker",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The character used to indicate an\nexponent. **Default** = `\"\"`"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 738,
																	"character": 22
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 201,
															"name": "exponentProduct",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The character used before an\nexponent indicator. **Default** = `\"\\\\cdot \"`"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 737,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 199,
															"name": "groupSeparator",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The character used to separate group of numbers, typically thousands. **Default** = `\"\\\\, \"`"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 735,
																	"character": 22
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 197,
															"name": "precision",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The number of digits used in the\nrepresentation of numbers. **Default** = 14."
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 733,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 200,
															"name": "product",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The character used to indicate product. Other option would be `\"\\\\times \"`. **Default** = `\"\\\\cdot \"`"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 736,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 203,
															"name": "scientificNotation",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The format used for numbers\nusing the scientific notation. **Default** = `\"auto\"`"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 739,
																	"character": 26
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "stringLiteral",
																		"value": "auto"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "engineering"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "on"
																	}
																]
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																204,
																198,
																205,
																202,
																201,
																199,
																197,
																200,
																203
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 732,
															"character": 42
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 732,
									"character": 23
								}
							]
						},
						{
							"id": 268,
							"name": "getOriginalContent",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 269,
									"name": "getOriginalContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "After calling {@linkcode module:mathlive#renderMathInElement renderMathInElement}\nor {@linkcode module:mathlive#makeMathField makeMathField} the original content\ncan be retrieved by calling this function.",
										"text": "Given the following markup:\n```html\n<span id='equation'>$$f(x)=sin(x)$$</span>\n```\nThe following code:\n```javascript\nMathLive.renderMathInElement('equation');\nconsole.log(MathLive.getOriginalContent('equation'));\n```\nwill output:\n```\n$$f(x)=sin(x)$$\n```",
										"returns": "the original content of the element.",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#getOriginalContent\n"
											}
										]
									},
									"parameters": [
										{
											"id": 270,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A DOM element ID, a DOM\nelement or a MathField."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "HTMLElement"
													},
													{
														"type": "reference",
														"name": "MathField",
														"id": 2
													}
												]
											}
										},
										{
											"id": 271,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 272,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 273,
															"name": "namespace",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The namespace used for the `data-`\nattributes.\nIf you used a namespace with `renderMathInElement()`, you must\nuse the same namespace here."
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 993,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																273
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 992,
															"character": 84
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 992,
									"character": 31
								}
							]
						},
						{
							"id": 217,
							"name": "highlightAtomID",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 218,
									"name": "highlightAtomID",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Highlights the span corresponding to the specified atomID.",
										"text": "This is used for text-to-speech with synchronized highlighting (read aloud)\n"
									},
									"parameters": [
										{
											"id": 219,
											"name": "atomID",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 797,
									"character": 28
								}
							]
						},
						{
							"id": 186,
							"name": "latexToAST",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 187,
									"name": "latexToAST",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts a LaTeX string to an Abstract Syntax Tree (MathJSON)",
										"text": "**See:** {@tutorial MASTON}\n",
										"returns": "The Abstract Syntax Tree as an object literal using the MathJSON format.",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#latexToAST\n"
											}
										]
									},
									"parameters": [
										{
											"id": 188,
											"name": "latex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string of valid LaTeX. It does not have to start\nwith a mode token such as a `$$` or `\\(`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 189,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 190,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 191,
															"name": "macros",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "A dictionary of LaTeX macros\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 702,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																191
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 701,
															"character": 47
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 701,
									"character": 23
								}
							]
						},
						{
							"id": 171,
							"name": "latexToMarkup",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 172,
									"name": "latexToMarkup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts a LaTeX string to a string of HTML markup.",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#latexToMarkup\n"
											}
										]
									},
									"parameters": [
										{
											"id": 173,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string of valid LaTeX. It does not have to start\nwith a mode token such as `$$` or `\\(`.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 174,
											"name": "mathstyle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If `'displaystyle'` the \"display\" mode of TeX\nis used to typeset the formula, which is most appropriate for formulas that are\ndisplayed in a standalone block.\n\nIf `'textstyle'` is used, the \"text\" mode\nof TeX is used, which is most appropriate when displaying math \"inline\"\nwith other text (on the same line).\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "displaystyle"
													},
													{
														"type": "stringLiteral",
														"value": "textstyle"
													}
												]
											}
										},
										{
											"id": 175,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "For debugging purposes, this function\ncan also return a text representation of internal data structures\nused to construct the markup.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "mathlist"
													},
													{
														"type": "stringLiteral",
														"value": "span"
													},
													{
														"type": "stringLiteral",
														"value": "html"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 642,
									"character": 26
								}
							]
						},
						{
							"id": 180,
							"name": "latexToMathML",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 181,
									"name": "latexToMathML",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts a LaTeX string to a string of MathML markup.",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#latexToMathML\n"
											}
										]
									},
									"parameters": [
										{
											"id": 182,
											"name": "latex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string of valid LaTeX. It does not have to start\nwith a mode token such as a `$$` or `\\(`."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 183,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 184,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 185,
															"name": "generateID",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "If true, add an `\"extid\"` attribute\nto the MathML nodes with a value matching the `atomID`. This can be used\nto map items on the screen with their MathML representation or vice-versa."
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 685,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																185
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 684,
															"character": 50
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 684,
									"character": 26
								}
							]
						},
						{
							"id": 206,
							"name": "latexToSpeakableText",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 207,
									"name": "latexToSpeakableText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts a LaTeX string to a textual representation ready to be spoken",
										"returns": "The spoken representation of the input LaTeX.",
										"tags": [
											{
												"tag": "example",
												"text": "\nconsole.log(MathLive.latexToSpeakableText('\\\\frac{1}{2}'));\n// ➡︎'half'"
											},
											{
												"tag": "function",
												"text": "module:mathlive#latexToSpeakableText\n"
											}
										]
									},
									"parameters": [
										{
											"id": 208,
											"name": "latex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string of valid LaTeX. It does not have to start\nwith a mode token such as a `$$` or `\\(`.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 209,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 210,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 212,
															"name": "textToSpeechMarkup",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The markup syntax to use\nfor the output of conversion to spoken text.\n\nPossible values are `ssml` for\nthe SSML markup or `mac` for the MacOS markup (e.g. `\"[[ltr]]\"`)\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 783,
																	"character": 26
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 211,
															"name": "textToSpeechRules",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The set of text to\nspeech rules to use.\n\nA value of `\"mathlive\"` (the default) indicates that\nthe simple rules built into MathLive should be used.\n\nA value of `\"sre\"` indicates that the Speech Rule Engine from Volker Sorge\nshould be used.\nNote that SRE is not included or loaded by MathLive and for this option to\nwork SRE should be loaded separately.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 782,
																	"character": 25
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "stringLiteral",
																		"value": "mathlive"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "sre"
																	}
																]
															}
														},
														{
															"id": 213,
															"name": "textToSpeechRulesOptions",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "A set of\nkey/value pairs that can be used to configure the speech rule engine.\n\nWhich options are available depends on the speech rule engine in use. There\nare no options available with MathLive's built-in engine. The options for\nthe SRE engine are documented [here]{@link:https://github.com/zorkow/speech-rule-engine}"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 784,
																	"character": 32
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 214,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"indexSignature": [
																		{
																			"id": 215,
																			"name": "__index",
																			"kind": 8192,
																			"kindString": "Index signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 216,
																					"name": "key",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"sources": [
																		{
																			"fileName": "mathlive.d.ts",
																			"line": 784,
																			"character": 34
																		}
																	]
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																212,
																211,
																213
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 781,
															"character": 57
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 781,
									"character": 33
								}
							]
						},
						{
							"id": 176,
							"name": "makeMathField",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 177,
									"name": "makeMathField",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a DOM element into an editable mathfield.",
										"text": "After the DOM element has been created, the value `element.mathfield` will\nreturn a reference to the mathfield object. This value is also returned\nby `makeMathField`\n",
										"returns": "\n\nGiven the HTML markup:\n```html\n<span id='equation'>$f(x)=sin(x)$</span>\n```\nThe following code will turn the span into an editable mathfield.\n```\nimport MathLive from 'dist/mathlive.mjs';\nMathLive.makeMathField('equation');\n```\n",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#makeMathField\n"
											}
										]
									},
									"parameters": [
										{
											"id": 178,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A DOM element, for example as obtained\nby `document.getElementById()`, or the ID of a DOM element as a string.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "HTMLElement"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 179,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "See {@tutorial CONFIG} for details.\n\n"
											},
											"type": {
												"type": "reference",
												"name": "MathFieldConfig",
												"id": 73
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MathField",
										"id": 2
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 670,
									"character": 26
								}
							]
						},
						{
							"id": 222,
							"name": "pauseReadAloud",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 223,
									"name": "pauseReadAloud",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Pauses a read aloud operation if one is in progress.",
										"text": "**See** {@linkcode module:editor/mathfield#speak speak}",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#pauseReadAloud\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 821,
									"character": 27
								}
							]
						},
						{
							"id": 226,
							"name": "playReadAloud",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 227,
									"name": "playReadAloud",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If a Read Aloud operation is in progress, read from a specified token",
										"text": "**See** {@linkcode module:editor-mathfield#speak speak}\n",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#playReadAloud\n"
											}
										]
									},
									"parameters": [
										{
											"id": 228,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 229,
											"name": "count",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The number of tokens to read."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 840,
									"character": 26
								}
							]
						},
						{
							"id": 220,
							"name": "readAloudStatus",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 221,
									"name": "readAloudStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the status of a Read Aloud operation (reading with synchronized\nhighlighting).",
										"text": "Possible values are:\n- `\"ready\"`\n- `\"playing\"`\n- `\"paused\"`\n- `\"unavailable\"`\n\n**See** {@linkcode module:editor-mathfield#speak speak}",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#readAloudStatus\n"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "ready"
											},
											{
												"type": "stringLiteral",
												"value": "playing"
											},
											{
												"type": "stringLiteral",
												"value": "paused"
											},
											{
												"type": "stringLiteral",
												"value": "unavailable"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 813,
									"character": 28
								}
							]
						},
						{
							"id": 230,
							"name": "renderMathInDocument",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 231,
									"name": "renderMathInDocument",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Transform all the elements in the document body that contain LaTeX code\ninto typeset math.",
										"text": "**Note:** This is a very expensive call, as it needs to parse the entire\nDOM tree to determine which elements need to be processed. In most cases\nthis should only be called once per document, once the DOM has been loaded.\nTo render a specific element, use {@linkcode module:mathlive#renderMathInElement renderMathInElement()}\n\n**See:** {@tutorial USAGE_GUIDE}\n",
										"tags": [
											{
												"tag": "example",
												"text": "\nimport MathLive from 'dist/mathlive.mjs';\ndocument.addEventListener(\"load\", () => {\n    MathLive.renderMathInDocument();\n});\n\n"
											}
										]
									},
									"parameters": [
										{
											"id": 232,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "See {@linkcode module:mathlive#renderMathInElement renderMathInElement()}\nfor details"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 233,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 234,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 235,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 861,
															"character": 43
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 861,
									"character": 33
								}
							]
						},
						{
							"id": 236,
							"name": "renderMathInElement",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 237,
									"name": "renderMathInElement",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Transform all the children of `element`, recursively, that contain LaTeX code\ninto typeset math.",
										"text": "**See:** {@tutorial USAGE_GUIDE}\n",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#renderMathInElement\n"
											}
										]
									},
									"parameters": [
										{
											"id": 238,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An HTML DOM element, or a string containing\nthe ID of an element."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "HTMLElement"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 239,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 240,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 244,
															"name": "ignoreClass",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "a string used as a\nregular expression of class names of elements whose content will not be\nscanned for delimiters\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 945,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 242,
															"name": "macros",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "Custom LaTeX macros\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 943,
																	"character": 14
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "object"
																}
															}
														},
														{
															"id": 241,
															"name": "namespace",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "Namespace that is added to `data-`\nattributes to avoid collisions with other libraries.\n\nIt is empty by default.\n\nThe namespace should be a string of lowercase letters.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 942,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 248,
															"name": "preserveOriginalContent",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "if true, store the\noriginal textual content of the element in a `data-original-content`\nattribute. This value can be accessed for example to restore the element to\nits original value:\n```javascript\n     elem.innerHTML = elem.dataset.originalContent;\n```"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 949,
																	"character": 31
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 245,
															"name": "processClass",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "a string used as a\nregular expression of class names of elements whose content **will** be\nscanned for delimiters,  even if their tag name or parent class name would\nhave prevented them from doing so.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 946,
																	"character": 20
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 246,
															"name": "processScriptType",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "`<script>` tags of the\nindicated type will be processed while others will be ignored.\n\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 947,
																	"character": 25
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 249,
															"name": "readAloud",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "if true, generate markup that can\nbe read aloud later using {@linkcode module:editor-mathfield#speak speak}\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 950,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 247,
															"name": "renderAccessibleContent",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The format(s) in\nwhich to render the math for screen readers:\n- `'mathml'` MathML\n- `'speakable-text'` Spoken representation\n\nYou can pass an empty string to turn off the rendering of accessible content.\n\nYou can pass multiple values separated by spaces, e.g `'mathml speakable-text'`\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 948,
																	"character": 31
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 243,
															"name": "skipTags",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "\nan array of tag names whose content will\n not be scanned for delimiters (unless their class matches the `processClass`\npattern below.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 944,
																	"character": 16
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																244,
																242,
																241,
																248,
																245,
																246,
																249,
																247,
																243
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 941,
															"character": 73
														}
													]
												}
											}
										},
										{
											"id": 250,
											"name": "renderToMarkup",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "a function that will convert any LaTeX found to\nHTML markup. This is only useful to override the default MathLive renderer\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 251,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 252,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 253,
																	"name": "params",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 951,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 254,
											"name": "renderToMathML",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "a function that will convert any LaTeX found to\nMathML markup.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 255,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 256,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 257,
																	"name": "params",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 951,
															"character": 67
														}
													]
												}
											}
										},
										{
											"id": 258,
											"name": "renderToSpeakableText",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "a function that will convert any LaTeX found to\nspeakable text markup.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 259,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 260,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 261,
																	"name": "params",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 951,
															"character": 118
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 941,
									"character": 32
								}
							]
						},
						{
							"id": 224,
							"name": "resumeReadAloud",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 225,
									"name": "resumeReadAloud",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resumes a read aloud operation if one was paused.",
										"text": "**See** {@linkcode module:editor-mathfield#speak speak}",
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#resumeReadAloud\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 829,
									"character": 28
								}
							]
						},
						{
							"id": 262,
							"name": "revertToOriginalContent",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 263,
									"name": "revertToOriginalContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "function",
												"text": "module:mathlive#revertToOriginalContent\n"
											}
										]
									},
									"parameters": [
										{
											"id": 264,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "HTMLElement"
													},
													{
														"type": "reference",
														"name": "MathField",
														"id": 2
													}
												]
											}
										},
										{
											"id": 265,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 266,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 267,
															"name": "namespace",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "The namespace used for the `data-`\nattributes. If you used a namespace with `renderMathInElement`, you must\nuse the same namespace here."
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 962,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																267
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 961,
															"character": 89
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 961,
									"character": 36
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								192,
								268,
								217,
								186,
								171,
								180,
								206,
								176,
								222,
								226,
								220,
								230,
								236,
								224,
								262
							],
							"categories": [
								{
									"title": "Converting",
									"children": [
										192,
										186,
										171,
										180,
										206
									]
								},
								{
									"title": "Other",
									"children": [
										268,
										176,
										230,
										236,
										262
									]
								},
								{
									"title": "Read Aloud",
									"children": [
										217,
										222,
										226,
										220,
										224
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "mathlive.d.ts",
							"line": 619,
							"character": 25
						}
					]
				},
				{
					"id": 2,
					"name": "MathField",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "property",
								"text": "{HTMLElement} element - The DOM element this mathfield is attached to."
							},
							{
								"tag": "property",
								"text": "{Object.<string, any>} config - A set of key/value pairs that can\nbe used to customize the behavior of the mathfield"
							},
							{
								"tag": "property",
								"text": "{string} id - A unique ID identifying this mathfield"
							},
							{
								"tag": "property",
								"text": "{boolean} keystrokeCaptionVisible - True if the keystroke caption\npanel is visible"
							},
							{
								"tag": "property",
								"text": "{boolean} virtualKeyboardVisible - True if the virtual keyboard is\nvisible"
							},
							{
								"tag": "property",
								"text": "{string} keystrokeBuffer The last few keystrokes, to look out\nfor inline shortcuts"
							},
							{
								"tag": "property",
								"text": "{object[]} keystrokeBufferStates The saved state for each of the\npast keystrokes"
							},
							{
								"tag": "class",
								"text": "MathField"
							},
							{
								"tag": "global",
								"text": "\n"
							}
						]
					},
					"children": [
						{
							"id": 42,
							"name": "$applyStyle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 43,
									"name": "$applyStyle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the style (color, bold, italic, etc...) of the selection or sets\nthe style to be applied to future input.",
										"text": "If there is a selection, the style is applied to the selection\n\nIf the selection already has this style, remove it. If the selection\nhas the style partially applied (i.e. only some sections), remove it from\nthose sections, and apply it to the entire selection.\n\nIf there is no selection, the style will apply to the next character typed.\n",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$applyStyle\n\n"
											}
										]
									},
									"parameters": [
										{
											"id": 44,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The style properties to be applied. All the\nproperties are optional and they can be combined.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 45,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 48,
															"name": "backgroundColor",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The background color.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 543,
																	"character": 23
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 47,
															"name": "color",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The text/fill color, as a CSS RGB value or\na string for some \"well-known\" colors, e.g. `\"red\"`, `\"#f00\"`, etc...\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 542,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 49,
															"name": "fontFamily",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The font family used to render text.\n\nThis value can the name of a locally available font, or a CSS font stack, e.g.\n`\"Avenir\"`, `\"Georgia, serif\"`, etc...\n\nThis can also be one of the following TeX-specific values:\n\n|`\"cmr\"`| Computer Modern Roman, serif|\n|`\"cmss\"`| Computer Modern Sans-serif, latin characters only|\n|`\"cmtt\"`| Typewriter, slab, latin characters only|\n|`\"cal\"`| Calligraphic style, uppercase latin letters and digits only|\n|`\"frak\"`| Fraktur, gothic, uppercase, lowercase and digits|\n|`\"bb\"`| Blackboard bold, uppercase only|\n|`\"scr\"`| Script style, uppercase only|\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 544,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 46,
															"name": "mode",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "Either `\"math\"`, `\"text\"` or `\"command\"`\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 541,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 50,
															"name": "series",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The font 'series', i.e. weight and\nstretch.\n\nThe following values can be combined, for example: `\"ebc\"`: extra-bold,\ncondensed. Aside from `\"b\"`, these attributes may not have visible effect if the\nfont family does not support this attribute:\n\n|`\"ul\"`| ultra-light weight|\n|`\"el\"`| extra-light|\n|`\"l\"`| light|\n|`\"sl\"`| semi-light|\n|`\"m\"`| medium (default)|\n|`\"sb\"`| semi-bold|\n|`\"b\"`| bold|\n|`\"eb\"`| extra-bold|\n|`\"ub\"`| ultra-bold|\n|`\"uc\"`| ultra-condensed|\n|`\"ec\"`| extra-condensed|\n|`\"c\"`| condensed|\n|`\"sc\"`| semi-condensed|\n|`\"n\"`| normal (default)|\n|`\"sx\"`| semi-expanded|\n|`\"x\"`| expanded|\n|`\"ex\"`| extra-expanded|\n|`\"ux\"`| ultra-expanded|\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 545,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 51,
															"name": "shape",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The font \"shape\", i.e. italic or upright.\n\n|`\"auto\"`| italic or upright, depending on mode and letter (single letters are italic in math mode)|\n|`\"up\"`| upright|\n|`\"it\"`| italic|\n|`\"sl\"`| slanted or oblique (often the same as italic)|\n|`\"sc\"`| small caps|\n|`\"ol\"`| outline|\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 546,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 52,
															"name": "size",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "The font size:  `\"size1\"`...`\"size10\"`.\n'\"size5\"' is the default size\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 547,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																48,
																47,
																49,
																46,
																50,
																51,
																52
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 540,
															"character": 22
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 540,
									"character": 15
								}
							]
						},
						{
							"id": 28,
							"name": "$el",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 29,
									"name": "$el",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the DOM element associated with this mathfield.",
										"text": "Note that `this.$el().mathfield === this`\n",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$el\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 404,
									"character": 7
								}
							]
						},
						{
							"id": 30,
							"name": "$insert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 31,
									"name": "$insert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inserts a block of text at the current insertion point.",
										"text": "This method can be called explicitly or invoked as a selector with {@linkcode MathField#$perform $perform(\"insert\")}\n.\n\nAfter the insertion, the selection will be set according to the `selectionMode`.\n",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$insert\n"
											}
										]
									},
									"parameters": [
										{
											"id": 32,
											"name": "s",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The text to be inserted\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 33,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 34,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 39,
															"name": "feedback",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "If true, provide audio and haptic feedback\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 457,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 38,
															"name": "focus",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "If true, the mathfield will be focused after\nthe insertion\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 456,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 37,
															"name": "format",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "The format of the string `s`:\n\n|`\"auto\"`| The string is Latex fragment or command) (default)|\n|`\"latex\"`| The string is a Latex fragment|\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 455,
																	"character": 14
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "stringLiteral",
																		"value": "auto"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "latex"
																	}
																]
															}
														},
														{
															"id": 35,
															"name": "insertionMode",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "-\n\n|`\"replaceSelection\"`| (default)|\n|`\"replaceAll\"`| |\n|`\"insertBefore\"`| |\n|`\"insertAfter\"`| |\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 453,
																	"character": 21
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "stringLiteral",
																		"value": "replaceSelection"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "replaceAll"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "insertBefore"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "insertAfter"
																	}
																]
															}
														},
														{
															"id": 40,
															"name": "mode",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "If empty, the current mode\nis used (default)\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 458,
																	"character": 12
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "stringLiteral",
																		"value": "text"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "math"
																	},
																	{
																		"type": "stringLiteral",
																		"value": ""
																	}
																]
															}
														},
														{
															"id": 41,
															"name": "resetStyle",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "If true, the style after the insertion\nis the same as the style before. If false, the style after the\ninsertion is the style of the last inserted atom.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 459,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 36,
															"name": "selectionMode",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "Describes where the selection\nwill be after the insertion:\n\n|`\"placeholder\"`| The selection will be the first available placeholder in the text that has been inserted (default)|\n|`\"after\"`| The selection will be an insertion point after the inserted text|\n|`\"before\"`| The selection will be an insertion point before the inserted text|\n|`\"item\"`| The inserted text will be selected|\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 454,
																	"character": 21
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "stringLiteral",
																		"value": "placeholder"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "after"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "before"
																	},
																	{
																		"type": "stringLiteral",
																		"value": "item"
																	}
																]
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																39,
																38,
																37,
																35,
																40,
																41,
																36
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 452,
															"character": 32
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 452,
									"character": 11
								}
							]
						},
						{
							"id": 53,
							"name": "$keystroke",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 54,
									"name": "$keystroke",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$keystroke\n"
											}
										]
									},
									"parameters": [
										{
											"id": 55,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string representation of a key combination.\n\nFor example `\"Alt-KeyU\"`.\n\nSee [W3C UIEvents](https://www.w3.org/TR/uievents/#code-virtual-keyboards)\nfor more information on the format of the descriptor.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 56,
											"name": "evt",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An event corresponding to the keystroke. Pass this\nevent if the keystroke originated from a user interaction that produced it.\nIf the keystroke is synthetic (for example, triggered in response to a\nclick or other event not involving a keyboard), omit it."
											},
											"type": {
												"type": "reference",
												"name": "Event"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 565,
									"character": 14
								}
							]
						},
						{
							"id": 22,
							"name": "$latex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 23,
									"name": "$latex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets or gets the content of the mathfield.",
										"text": "If `text` is not empty, sets the content of the mathfield to the\ntext interpreted as a LaTeX expression.\n\nIf `text` is empty (or omitted), return the content of the mathfield as a\nLaTeX expression.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$latex\n"
											}
										]
									},
									"parameters": [
										{
											"id": 24,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 25,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 26,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 27,
															"name": "suppressChangeNotifications",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"text": "If true, the\nhandlers for the contentWillChange and contentDidChange notifications will\nnot be invoked. **Default** = `false`.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 394,
																	"character": 35
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																27
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 393,
															"character": 35
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 393,
									"character": 10
								}
							]
						},
						{
							"id": 5,
							"name": "$perform",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 6,
									"name": "$perform",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Performs a command defined by a selector.",
										"text": "#### Moving the insertion point\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"moveToNextChar\"` | |\n| `\"moveToPreviousChar\"` | |\n| `\"moveUp\"` | |\n| `\"moveDown\"` | |\n| `\"moveToNextPlaceholder\"` | |\n| `\"moveToPreviousPlaceholder\"` | |\n| `\"moveToNextWord\"` | |\n| `\"moveToPreviousWord\"` | |\n| `\"moveToGroupStart\"` | |\n| `\"moveToGroupEnd\"` | |\n| `\"moveToMathFieldStart\"` | |\n| `\"moveToMathFieldEnd\"` | |\n| `\"moveToSuperscript\"` | |\n| `\"moveToSubscript\"` | |\n| `\"moveToOpposite\"` | |\n| `\"moveBeforeParent\"` | |\n| `\"moveAfterParent\"` | |\n\n\n#### Selection\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"selectGroup\"` | Select all the atoms in the current group, that is all the siblings.<br> When the selection is in a numerator, the group is the numerator.<br>When the selection is a superscript or subscript, the group is the supsub.|\n| `\"selectAll\"` | Select all the atoms in the mathfield|\n\n\n#### Extending the selection\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"extendToNextChar\"` | |\n| `\"extendToPreviousChar\"` | |\n| `\"extendToNextWord\"` | |\n| `\"extendToPreviousWord\"` | |\n| `\"extendUp\"` | |\n| `\"extendDown\"` | |\n| `\"extendToNextBoundary\"` | |\n| `\"extendToPreviousBoundary\"` | |\n| `\"extendToGroupStart\"` | |\n| `\"extendToGroupEnd\"` | |\n| `\"extendToMathFieldStart\"` | |\n| `\"extendToMathFieldEnd\"` | |\n\n\n#### Editing / deleting\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"deleteAll\"` | Delete everything in the field |\n| `\"delete\"` | Delete the current selection |\n| `\"deleteNextChar\"` | |\n| `\"deletePreviousChar\"` | |\n| `\"deleteNextWord\"` | |\n| `\"deletePreviousWord\"` | |\n| `\"deleteToGroupStart\"` | |\n| `\"deleteToGroupEnd\"` | |\n| `\"deleteToMathFieldEnd\"` | |\n| `\"transpose\"` | |\n\n\n#### Editing a matrix\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"addRowAfter\"` | |\n| `\"addRowBefore\"` | |\n| `\"addColumnAfter\"` | |\n| `\"addColumnBefore\"` | |\n\n\n#### Other editing commands\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"scrollIntoView\"` | |\n| `\"scrollToStart\"` | |\n| `\"switchMode\"` | |\n| `\"complete\"` | |\n| `\"nextSuggestion\"` | |\n| `\"previousSuggestion\"` | |\n| `\"toggleKeystrokeCaption\"` | |\n| `\"applyStyle\"` | |\n\n\n#### Clipboard\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"undo\"` | |\n| `\"redo\"` | |\n| `\"copyToClipboard\"` | |\n| `\"cutToClipboard\"` | |\n| `\"pasteFromClipboard\"` | |\n\n\n#### Virtual Keyboard\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"toggleVirtualKeyboard\"` | |\n| `\"showVirtualKeyboard\"` | |\n| `\"hideVirtualKeyboard\"` | |\n| `\"toggleVirtualKeyboardAlt\"` | |\n| `\"toggleVirtualKeyboardShift\"` | |\n| `\"showAlternateKeys\"` | |\n| `\"hideAlternateKeys\"` | |\n| `\"performAlternateKeys\"` | |\n| `\"switchKeyboardLayer\"` | |\n| `\"shiftKeyboardLayer\"` | |\n| `\"unshiftKeyboardLayer\"` | |\n| `\"insertAndUnshiftKeyboardLayer\"` | |\n| `\"performWithFeedback\"` | |\n\n\n#### Speech\n\n| Name                 | Description               |\n| --------------------- | ------------------------- |\n| `\"speak\"` | speaks the amount specified by the first parameter. |\n",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$perform\n"
											}
										]
									},
									"parameters": [
										{
											"id": 7,
											"name": "command",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A selector, or an array whose first element\nis a selector, and whose subsequent elements are arguments to the selector.\n\nNote that selectors do not include a final \"_\". They can be passed either\nin camelCase or kebab-case.\n\n```javascript\nmf.$perform('selectAll');\nmf.$perform('select-all');\n```\nIn the above example, both calls invoke the same selector.\n\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 294,
									"character": 12
								}
							]
						},
						{
							"id": 3,
							"name": "$revertToOriginalContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 4,
									"name": "$revertToOriginalContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reverts this mathfield to its original content.",
										"text": "After this method has been\ncalled, no other methods can be called on the object.\n\nTo turn the\nelement back into a mathfield, call `MathLive.makeMathField()` on the\nelement again to get a new mathfield object.\n",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$revertToOriginalContent\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 149,
									"character": 28
								}
							]
						},
						{
							"id": 11,
							"name": "$selectedText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 12,
									"name": "$selectedText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a textual representation of the selection in the mathfield.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$selectedText\n"
											}
										]
									},
									"parameters": [
										{
											"id": 13,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The format of the result.\n\n|`\"latex\"`|Macros are not expanded|\n|`\"latex-expanded\"`|All macros are recursively expanded to their definition|\n|`\"spoken\"`|\n|`\"spoken-text\"`|\n|`\"spoken-ssml\"`|\n|`\"spoken-ssml-withHighlighting\"`|\n|`\"mathML\"`|\n|`\"json\"`|\n\n**Default** = `\"latex\"`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 334,
									"character": 17
								}
							]
						},
						{
							"id": 20,
							"name": "$selectionAtEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 21,
									"name": "$selectionAtEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the selection extends to the end of the selection group.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$selectionAtEnd\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 373,
									"character": 19
								}
							]
						},
						{
							"id": 18,
							"name": "$selectionAtStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 19,
									"name": "$selectionAtStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the selection starts at the beginning of the selection group.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$selectionAtStart\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 365,
									"character": 21
								}
							]
						},
						{
							"id": 16,
							"name": "$selectionDepth",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 17,
									"name": "$selectionDepth",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the depth of the selection group.",
										"text": "If the selection is at the root level, returns 0.\n\nIf the selection is a portion of the numerator of a fraction\nwhich is at the root level, return 1. Note that in that case, the numerator\nwould be the \"selection group\".\n",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$selectionDepth\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 357,
									"character": 19
								}
							]
						},
						{
							"id": 14,
							"name": "$selectionIsCollapsed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 15,
									"name": "$selectionIsCollapsed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the selection is collapsed.",
										"returns": "True if the length of the selection is 0, that is, if it is a single\ninsertion point.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$selectionIsCollapsed\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 343,
									"character": 25
								}
							]
						},
						{
							"id": 60,
							"name": "$setConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 61,
									"name": "$setConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update the configuration options for this mathfield.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$setConfig\n"
											}
										]
									},
									"parameters": [
										{
											"id": 62,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "See {@tutorial CONFIG Configuration Options} for details.\n"
											},
											"type": {
												"type": "reference",
												"name": "MathFieldConfig",
												"id": 73
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 582,
									"character": 14
								}
							]
						},
						{
							"id": 8,
							"name": "$text",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 9,
									"name": "$text",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a textual representation of the mathfield.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$text\n"
											}
										]
									},
									"parameters": [
										{
											"id": 10,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The format of the result.\n\n|`\"latex\"`|Macros are not expanded|\n|`\"latex-expanded\"`|All macros are recursively expanded to their definition|\n|`\"spoken\"`||\n|`\"spoken-text\"`||\n|`\"spoken-ssml\"`||\n|`\"spoken-ssml-withHighlighting\"`||\n|`\"mathML\"`||\n|`\"json\"`|A stringified version of the JSON representation of the content|\n\n**Default** = `\"latex\"`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 314,
									"character": 9
								}
							]
						},
						{
							"id": 57,
							"name": "$typedText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 58,
									"name": "$typedText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Simulates a user typing the keys indicated by text.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#$typedText\n"
											}
										]
									},
									"parameters": [
										{
											"id": 59,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A sequence of one or more characters."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 573,
									"character": 14
								}
							]
						},
						{
							"id": 63,
							"name": "speak_",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 64,
									"name": "speak_",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Speak some part of the expression, either with or without synchronized highlighting.",
										"tags": [
											{
												"tag": "method",
												"text": "MathField#speak_\n"
											}
										]
									},
									"parameters": [
										{
											"id": 65,
											"name": "amount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "`\"all\"`, `\"selection\"`, `\"left\"`, `\"right\"`, `\"group\"`, `\"parent\"`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 66,
											"name": "speakOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 67,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 68,
															"name": "withHighlighting",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"text": "If true, synchronized\nhighlighting of speech will happen (if possible). Default is false.\n"
															},
															"sources": [
																{
																	"fileName": "mathlive.d.ts",
																	"line": 595,
																	"character": 24
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																68
															]
														}
													],
													"sources": [
														{
															"fileName": "mathlive.d.ts",
															"line": 594,
															"character": 40
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 594,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								42,
								28,
								30,
								53,
								22,
								5,
								3,
								11,
								20,
								18,
								16,
								14,
								60,
								8,
								57,
								63
							],
							"categories": [
								{
									"title": "Accessing the Content",
									"children": [
										22,
										11,
										8
									]
								},
								{
									"title": "Changing the Content",
									"children": [
										42,
										30,
										53,
										57
									]
								},
								{
									"title": "Other",
									"children": [
										28,
										5,
										3,
										60,
										63
									]
								},
								{
									"title": "Selection",
									"children": [
										20,
										18,
										16,
										14
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "mathlive.d.ts",
							"line": 136,
							"character": 23
						}
					]
				},
				{
					"id": 69,
					"name": "MathFieldCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "typedef",
								"text": "{function} MathFieldCallback"
							},
							{
								"tag": "param",
								"text": "",
								"param": "mathfield"
							},
							{
								"tag": "returns",
								"text": ""
							},
							{
								"tag": "global",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "mathlive.d.ts",
							"line": 7,
							"character": 30
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 70,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 71,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 72,
											"name": "mf",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "MathField",
												"id": 2
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 7,
									"character": 32
								}
							]
						}
					}
				},
				{
					"id": 73,
					"name": "MathFieldConfig",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "typedef",
								"text": "MathFieldConfig"
							},
							{
								"tag": "type",
								"text": "{Object}"
							},
							{
								"tag": "property",
								"text": "{string} locale?"
							},
							{
								"tag": "property",
								"text": "{object<string, string>} strings?"
							},
							{
								"tag": "property",
								"text": "{number} horizontalSpacingScale?"
							},
							{
								"tag": "property",
								"text": "{string} namespace?"
							},
							{
								"tag": "property",
								"text": "{function} substituteTextArea?"
							},
							{
								"tag": "property",
								"text": "{\"math\" | \"text\"} defaultMode?"
							},
							{
								"tag": "property",
								"text": "{MathFieldCallback} onFocus?"
							},
							{
								"tag": "property",
								"text": "{MathFieldCallback} onBlur?"
							},
							{
								"tag": "property",
								"text": "{function} onKeystroke?"
							},
							{
								"tag": "property",
								"text": "{function} onAnnounce?"
							},
							{
								"tag": "property",
								"text": "{boolean} overrideDefaultInlineShortcuts?"
							},
							{
								"tag": "property",
								"text": "{object<string, string>} inlineShortcuts?"
							},
							{
								"tag": "property",
								"text": "{number} inlineShortcutTimeout?"
							},
							{
								"tag": "property",
								"text": "{boolean} smartFence?"
							},
							{
								"tag": "property",
								"text": "{boolean} smartSuperscript?"
							},
							{
								"tag": "property",
								"text": "{number} scriptDepth?"
							},
							{
								"tag": "property",
								"text": "{boolean} removeExtraneousParentheses?"
							},
							{
								"tag": "property",
								"text": "{boolean} ignoreSpacebarInMathMode?"
							},
							{
								"tag": "property",
								"text": "{string} virtualKeyboardToggleGlyph?"
							},
							{
								"tag": "property",
								"text": "{\"manual\" | \"onfocus\" | \"off\" } virtualKeyboardMode?"
							},
							{
								"tag": "property",
								"text": "{\"all\" | \"numeric\" | \"roman\" | \"greek\" | \"functions\" | \"command\" | string} virtualKeyboards?"
							},
							{
								"tag": "property",
								"text": "{\"qwerty\" | \"azerty\" | \"qwertz\" | \"dvorak\" | \"colemak\"} virtualKeyboardRomanLayout?"
							},
							{
								"tag": "property",
								"text": "{object<string, string>} customVirtualKeyboardLayers?"
							},
							{
								"tag": "property",
								"text": "{object<string, object>} customVirtualKeyboards?"
							},
							{
								"tag": "property",
								"text": "{\"material\" | \"apple\" | \"\"} virtualKeyboardTheme?"
							},
							{
								"tag": "property",
								"text": "{boolean} keypressVibration?"
							},
							{
								"tag": "property",
								"text": "{string} keypressSound?"
							},
							{
								"tag": "property",
								"text": "{string} plonkSound?"
							},
							{
								"tag": "property",
								"text": "{\"mathlive\" | \"sre\"} textToSpeechRules?"
							},
							{
								"tag": "property",
								"text": "{\"ssml\" | \"mac\"} textToSpeechMarkup?"
							},
							{
								"tag": "property",
								"text": "{object} textToSpeechRulesOptions?"
							},
							{
								"tag": "property",
								"text": "{\"local\" | \"amazon\"} speechEngine?"
							},
							{
								"tag": "property",
								"text": "{string} speechEngineVoice?"
							},
							{
								"tag": "property",
								"text": "{string} speechEngineRate?"
							},
							{
								"tag": "property",
								"text": "{function} onMoveOutOf?"
							},
							{
								"tag": "property",
								"text": "{function} onTabOutOf?"
							},
							{
								"tag": "property",
								"text": "{MathFieldCallback} onContentWillChange?"
							},
							{
								"tag": "property",
								"text": "{MathFieldCallback} onContentDidChange?"
							},
							{
								"tag": "property",
								"text": "{MathFieldCallback} onSelectionWillChange?"
							},
							{
								"tag": "property",
								"text": "{MathFieldCallback} onSelectionDidChange?"
							},
							{
								"tag": "property",
								"text": "{function} onUndoStateWillChange?"
							},
							{
								"tag": "property",
								"text": "{function} onUndoStateDidChange?"
							},
							{
								"tag": "property",
								"text": "{function} onModeChange?"
							},
							{
								"tag": "property",
								"text": "{function} onVirtualKeyboardToggle?"
							},
							{
								"tag": "property",
								"text": "{function} onReadAloudStatus?"
							},
							{
								"tag": "property",
								"text": "{function} handleSpeak?"
							},
							{
								"tag": "property",
								"text": "{function} handleReadAloud?"
							},
							{
								"tag": "global",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "mathlive.d.ts",
							"line": 61,
							"character": 28
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 74,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 112,
									"name": "customVirtualKeyboardLayers",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 88,
											"character": 31
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 113,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 114,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 115,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 88,
													"character": 33
												}
											]
										}
									}
								},
								{
									"id": 116,
									"name": "customVirtualKeyboards",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 91,
											"character": 26
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 117,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 118,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 119,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 91,
													"character": 28
												}
											]
										}
									}
								},
								{
									"id": 86,
									"name": "defaultMode",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 69,
											"character": 15
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "math"
											},
											{
												"type": "stringLiteral",
												"value": "text"
											}
										]
									}
								},
								{
									"id": 166,
									"name": "handleReadAloud",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 116,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 167,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 168,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 169,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 116,
													"character": 21
												}
											]
										}
									}
								},
								{
									"id": 162,
									"name": "handleSpeak",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 115,
											"character": 15
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 163,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 164,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 165,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 115,
													"character": 17
												}
											]
										}
									}
								},
								{
									"id": 80,
									"name": "horizontalSpacingScale",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 66,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 107,
									"name": "ignoreSpacebarInMathMode",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 83,
											"character": 28
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 102,
									"name": "inlineShortcutTimeout",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 78,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 98,
									"name": "inlineShortcuts",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 75,
											"character": 19
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 99,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 100,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 101,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 75,
													"character": 21
												}
											]
										}
									}
								},
								{
									"id": 122,
									"name": "keypressSound",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 96,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 121,
									"name": "keypressVibration",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 95,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 75,
									"name": "locale",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 62,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 81,
									"name": "namespace",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 67,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 93,
									"name": "onAnnounce",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 73,
											"character": 14
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 94,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 95,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 96,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 73,
													"character": 16
												}
											]
										}
									}
								},
								{
									"id": 88,
									"name": "onBlur",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 71,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "MathFieldCallback",
										"id": 69
									}
								},
								{
									"id": 139,
									"name": "onContentDidChange",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 107,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "MathFieldCallback",
										"id": 69
									}
								},
								{
									"id": 138,
									"name": "onContentWillChange",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 106,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "MathFieldCallback",
										"id": 69
									}
								},
								{
									"id": 87,
									"name": "onFocus",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 70,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "MathFieldCallback",
										"id": 69
									}
								},
								{
									"id": 89,
									"name": "onKeystroke",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 72,
											"character": 15
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 90,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 91,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 92,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 72,
													"character": 17
												}
											]
										}
									}
								},
								{
									"id": 150,
									"name": "onModeChange",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 112,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 151,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 152,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 153,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 112,
													"character": 18
												}
											]
										}
									}
								},
								{
									"id": 130,
									"name": "onMoveOutOf",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 104,
											"character": 15
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 131,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 132,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 133,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 104,
													"character": 17
												}
											]
										}
									}
								},
								{
									"id": 158,
									"name": "onReadAloudStatus",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 114,
											"character": 21
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 159,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 160,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 161,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 114,
													"character": 23
												}
											]
										}
									}
								},
								{
									"id": 141,
									"name": "onSelectionDidChange",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 109,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "MathFieldCallback",
										"id": 69
									}
								},
								{
									"id": 140,
									"name": "onSelectionWillChange",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 108,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"name": "MathFieldCallback",
										"id": 69
									}
								},
								{
									"id": 134,
									"name": "onTabOutOf",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 105,
											"character": 14
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 135,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 136,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 137,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 105,
													"character": 16
												}
											]
										}
									}
								},
								{
									"id": 146,
									"name": "onUndoStateDidChange",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 111,
											"character": 24
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 147,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 148,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 149,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 111,
													"character": 26
												}
											]
										}
									}
								},
								{
									"id": 142,
									"name": "onUndoStateWillChange",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 110,
											"character": 25
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 143,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 144,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 145,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 110,
													"character": 27
												}
											]
										}
									}
								},
								{
									"id": 154,
									"name": "onVirtualKeyboardToggle",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 113,
											"character": 27
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 155,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 156,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 157,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 113,
													"character": 29
												}
											]
										}
									}
								},
								{
									"id": 97,
									"name": "overrideDefaultInlineShortcuts",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 74,
											"character": 34
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 123,
									"name": "plonkSound",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 97,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 106,
									"name": "removeExtraneousParentheses",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 82,
											"character": 31
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 105,
									"name": "scriptDepth",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 81,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 103,
									"name": "smartFence",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 79,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 104,
									"name": "smartSuperscript",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 80,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 127,
									"name": "speechEngine",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 101,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "local"
											},
											{
												"type": "stringLiteral",
												"value": "amazon"
											}
										]
									}
								},
								{
									"id": 129,
									"name": "speechEngineRate",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 103,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 128,
									"name": "speechEngineVoice",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 102,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 76,
									"name": "strings",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 63,
											"character": 11
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 77,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 78,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 79,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 63,
													"character": 13
												}
											]
										}
									}
								},
								{
									"id": 82,
									"name": "substituteTextArea",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 68,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 83,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 84,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 85,
															"name": "params",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "mathlive.d.ts",
													"line": 68,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 125,
									"name": "textToSpeechMarkup",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 99,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "ssml"
											},
											{
												"type": "stringLiteral",
												"value": "mac"
											}
										]
									}
								},
								{
									"id": 124,
									"name": "textToSpeechRules",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 98,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "mathlive"
											},
											{
												"type": "stringLiteral",
												"value": "sre"
											}
										]
									}
								},
								{
									"id": 126,
									"name": "textToSpeechRulesOptions",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 100,
											"character": 28
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 109,
									"name": "virtualKeyboardMode",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 85,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "manual"
											},
											{
												"type": "stringLiteral",
												"value": "onfocus"
											},
											{
												"type": "stringLiteral",
												"value": "off"
											}
										]
									}
								},
								{
									"id": 111,
									"name": "virtualKeyboardRomanLayout",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 87,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "qwerty"
											},
											{
												"type": "stringLiteral",
												"value": "azerty"
											},
											{
												"type": "stringLiteral",
												"value": "qwertz"
											},
											{
												"type": "stringLiteral",
												"value": "dvorak"
											},
											{
												"type": "stringLiteral",
												"value": "colemak"
											}
										]
									}
								},
								{
									"id": 120,
									"name": "virtualKeyboardTheme",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 94,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "material"
											},
											{
												"type": "stringLiteral",
												"value": "apple"
											},
											{
												"type": "stringLiteral",
												"value": ""
											}
										]
									}
								},
								{
									"id": 108,
									"name": "virtualKeyboardToggleGlyph",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 84,
											"character": 30
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 110,
									"name": "virtualKeyboards",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "mathlive.d.ts",
											"line": 86,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "all"
											},
											{
												"type": "stringLiteral",
												"value": "numeric"
											},
											{
												"type": "stringLiteral",
												"value": "roman"
											},
											{
												"type": "stringLiteral",
												"value": "greek"
											},
											{
												"type": "stringLiteral",
												"value": "functions"
											},
											{
												"type": "stringLiteral",
												"value": "command"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										112,
										116,
										86,
										166,
										162,
										80,
										107,
										102,
										98,
										122,
										121,
										75,
										81,
										93,
										88,
										139,
										138,
										87,
										89,
										150,
										130,
										158,
										141,
										140,
										134,
										146,
										142,
										154,
										97,
										123,
										106,
										105,
										103,
										104,
										127,
										129,
										128,
										76,
										82,
										125,
										124,
										126,
										109,
										111,
										120,
										108,
										110
									]
								}
							],
							"sources": [
								{
									"fileName": "mathlive.d.ts",
									"line": 61,
									"character": 30
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						170
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						69,
						73
					]
				}
			],
			"sources": [
				{
					"fileName": "mathlive.d.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1
			]
		}
	]
}